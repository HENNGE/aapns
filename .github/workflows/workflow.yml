name: aapns workflow

on: push

permissions:
  actions: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  PYTHON_VERSIONS: '["3.8", "3.9", "3.10", "3.11"]'
  PYTHON_VERSION_MIN: 3.8
  POETRY_VERSION: 1.3.1

jobs:
  python-versions:
    # Workaround to set matrix values using env var,
    # due to `jobs.<job_id>.strategy` not supporting `env` context:
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    name: Set supported python versions
    runs-on: "ubuntu-latest"
    outputs:
      python-versions: ${{ steps.set-python-versions.outputs.python-versions }}
    steps:
      - id: set-python-versions
        run: echo "python-versions=$PYTHON_VERSIONS" >> $GITHUB_OUTPUT

  poetry-lock:
    name: Generate and save poetry.lock
    runs-on: "ubuntu-latest"
    needs: python-versions
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.python-versions.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - run: poetry lock
      - uses: actions/upload-artifact@v3
        with:
          name: poetry-lock-${{ matrix.python-version }}
          path: poetry.lock

  pytest:
    name: Run pytest
    runs-on: ubuntu-latest
    needs: [python-versions, poetry-lock]
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.python-versions.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3 # Test requires go
        with:
          go-version: "stable"
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - uses: actions/download-artifact@v3
        with:
          name: poetry-lock-${{ matrix.python-version }}
      - run: poetry install
      - run: poetry run pytest

  mypy-pre-commit:
    name: Run mypy pre-commit
    runs-on: ubuntu-latest
    needs: [python-versions, poetry-lock]
    strategy:
      matrix:
        python-version: ${{ fromJSON(needs.python-versions.outputs.python-versions) }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: curl -sSL https://install.python-poetry.org | python3 -
      - uses: actions/download-artifact@v3
        with:
          name: poetry-lock-${{ matrix.python-version }}
      - run: poetry install
      - uses: pre-commit/actions@v3.0.0
        with:
          extra_args: mypy --all-files

  pre-commit:
    name: Run pre-commit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_MIN }}
      - uses: pre-commit/actions@v3.0.0
        with:
          extra_args: --hook-stage manual --all-files
